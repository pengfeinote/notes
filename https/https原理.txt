https://sylvanassun.github.io/2017/08/06/2017-08-06-DigestHttps/

对称加密
对称加密的基本思想是: 通信双方使用同一个密钥(或者是两个可以简单地互相推算的密钥)来对明文进行加密与解密.

非对称加密
非对称加密也叫公开密钥加密,它使用了两个密钥,一个为公钥,一个为私钥,当一个用作于加密的时候,另一个则用作解密.

这两个密钥就算被其他人知道了其中一个也不能凭借它计算出另一个密钥,所以可以公开其中一个密钥(也就是公钥),不公开的密钥为私钥.

Certificate Authority
对称加密与非对称加密结合使用的方法虽然能够保证了通信过程的安全,但也引发了如下问题:

客户端要如何获取到服务器的公钥?
如果公钥在发送过程被中间人拦截,然后中间人发送自己的公钥给客户端,客户端该如何确认?
解决方法依是通过一个权威的CA(Certificate Authority)证书中心,它来负责颁发证书,这个证书包含了如下等内容:

证书的发布机构.
证书的有效期
公钥
证书所有人
数字签名
数字签名是用来验证数据完整性的,首先将公钥与个人信息用一个Hash算法生成一个消息摘要,Hash算法是不可逆的,且只要内容发生变化,那生成的消息摘要将会截然不同.然后CA再用它的私钥对消息摘要加密,最终形成数字签名.

当客户端接收到证书时,只需要用同样的Hash算法再次生成一个消息摘要,然后用CA的公钥对证书进行解密,之后再对比两个消息摘要就能知道数据有没有被篡改过了.

那么CA的公钥又要从哪里来呢?这似乎陷入了一个鸡生蛋,蛋生鸡的悖论,其实CA也有证书来证明自己,而且CA证书的信用体系就像一棵树的结构,上层节点是信用高的CA同时它也会对底层的CA做信用背书,操作系统中已经内置了一些根证书,所以相当于你已经自动信任了它们(需要注意误安装一些非法或不安全的证书).

浏览器对服务器发送了一次请求.
服务器发送证书.
浏览器读取证书中的所有人,有效期等信息并进行校验.
浏览器查找操作系统中内置的已经信任的根证书,并对服务器发来的证书进行验证.
如果找不到,浏览器报错,服务器发来的证书是不可信任的.
如果找到,浏览器会从操作系统中取出CA的公钥,然后对服务器发来的证书中的数字签名进行解密.
浏览器使用相同的Hash算法计算出消息摘要,然后对数字签名中的消息摘要进行校对.
如果结果一致,证书合法.
之后浏览器就可以生成对称加密的密钥然后用非对称加密的方式发送给服务器,之后的通信就都是安全的了.



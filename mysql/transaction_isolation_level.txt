1.查看当前会话隔离级别
 
select @@tx_isolation;
 
2.查看系统当前隔离级别
 
select @@global.tx_isolation;
 
3.设置当前会话隔离级别
 
set session transaction isolatin level repeatable read;
 
4.设置系统当前隔离级别
 
set global transaction isolation level repeatable read;
 
5.命令行，开始事务时
 
set autocommit=off 或者 start transaction


事务4特性：
acid(原子性，一致性，隔离性，持久性)
数据库的隔离级别：
读未提交(一个事务读取了另一个事务未提交的数据)
读已提交(一个事务只能读取另一个事务已提交的数据，但是，事务两次读取到的数据可能不一致)
可重复读(同一个事务中多次读取相同的数据返回的结果是一样的。其避免了脏读和不可重复读问题，但幻读依然存在。幻读：幻读是指当事务不是独立执行时发生的一种现象，例如第一个事务对一个表中的数据进行了修改，比如这种修改涉及到表中的“全部数据行”。同时，第二个事务也 修改这个表中的数据，这种修改是向表中插入“一行新数据”。那么，以后就会发生操作第一个事务的用户发现表中还有没有修改的数据行，就好象发生了幻觉一 样.一般解决幻读的方法是增加范围锁RangeS，锁定检锁范围为只读，这样就避免了幻读。简单来说，幻读是由插入引起的)

幻读和不可重复读在概念上有交叉，不可重复读重点在修改，幻读重点在增删
串行化(事务串行执行，避免所有问题)

mysql->innodb->MVCC

mysql默认的事务隔离级别是repeatable read

MVCC:multiVersion concurrency control:多版本并发控制 属于mysql乐观锁的实现机制

MVCC为每一行添加两个隐藏字段，分别表示记录的创建版本和删除版本。
https://segmentfault.com/a/1190000009374567

事务在select时，只会选择创建版本小于等于本事务版本和删除版本大于本事务版本或未定义的记录。
事务在insert时，会将创建版本设为当前事务版本，删除版本设为未定义
事务在delete时，不会真的delete，会将删除版本设为当前事务版本
事务在update时，会新增一行记录，原记录的删除版本设为当前事务版本，新记录的创建版本设为当前记录的版本

1：mysql的可重复读部分解决了幻读问题？
	mvcc并未完全解决幻读的问题：比如事务1，事务2都查询id为1的记录，如不存在则插入。若事务1先插入并提交，此时事务2进行查询，仍然认为没有id为1的记录，但是插入id为1的记录时，返回失败。此时出现了幻读
	如何解决幻读？
	共享锁(select lock in share mode)与排他锁(select for update)：都是悲观锁，普通的select，快照读，加锁的select，快照读 
	共享锁：允许其他事务加共享锁，允许读取，不允许其他事务更新或加排他锁。
	排他锁：不允许其他事务加共享锁，排他锁或更新
	select lock in share mode：
	
	gap锁：在索引记录之间的间隙中加锁，或者是在某一条索引记录之前或者之后加锁，并不包括该索引记录本身。gap lock的机制主要是解决可重复读模式下的幻读问题，关于幻读的演示和gap锁如何解决了幻读。间隙锁是针对事务隔离级别为可重复读或以上级别而已的。只锁定范围
	next-key 锁：记录锁和间隙锁的结合，对于InnoDB中，更新非唯一索引对应的记录（在这里来说是更新v1字段的值），会加上Next-Key Lock。如果更新记录为空，就不能加记录锁，只能加间隙锁。next key锁，即锁住记录索引本身，也锁定范围
	 锁选择

1）、如果更新条件没有走索引，例如执行”update from t1 set v2=0 where v2=5;” ，此时会进行全表扫描，扫表的时候，要阻止其他任何的更新操作，所以上升为表锁。

2）、如果更新条件为索引字段，但是并非唯一索引（包括主键索引），例如执行“update from t1 set v2=0 where v1=9;” 那么此时更新会使用Next-Key Lock。使用Next-Key Lock的原因：

a）、首先要保证在符合条件的记录上加上排他锁，会锁定当前非唯一索引和对应的主键索引的值；

b）、还要保证锁定的区间不能插入新的数据。

3）、如果更新条件为唯一索引，则使用Record Lock（记录锁）。
	
2：mysql何时确认删除记录？
	InnoDB由于要支持多版本协议，因此无论是更新，删除，都只是设置记录上的deleted bit标记位，而不是真正的删除记录。后续这些记录的真正删除，是通过Purge后台进程实现的。Purge进程定期扫描InnoDB的undo，按照先读老undo，再读新undo的顺序，读取每条undo record。对于每一条undo record，判断其对应的记录是否可以被purge(purge进程有自己的read view，等同于进程开始时最老的活动事务之前的view，保证purge的数据，一定是不可见数据，对任何人来说)，如果可以purge，则构造完整记录(row_purge_parse_undo_rec)。然后按照先purge二级索引，最后purge聚簇索引的顺序，purge一个操作生成的旧版本完整记录。

https://diwakergupta.github.io/thrift-missing-guide/

The Thrift type system consists of 
pre-defined base types
user-defined structs
container
exceptions
service definitions

pre-defined base types:
	bool: A boolean value (true or false), one byte
	byte: A signed byte
	i16: A 16-bit signed integer
	i32: A 32-bit signed integer
	i64: A 64-bit signed integer
	double: A 64-bit floating point number
	binary: A byte array
	string: Encoding agnostic text or binary string
	
container types:
	list<t1>: An ordered list of elements of type t1. May contain duplicates.
	set<t1>: An unordered set of unique elements of type t1.
	map<t1,t2>: A map of strictly unique keys of type t1 to values of type t2.
	
Structs and Exceptions
	A Thrift struct is conceptually similar to a C struct?—?a convenient way of grouping together (and encapsulating) related items. Structs translate to classes in object-oriented languages.

	Exceptions are syntactically and functionally equivalent to structs except that they are declared using the exception keyword instead of the struct keyword. They differ from structs in semantics?—?when defining RPC services, developers may declare that a remote method throws an exception.
	
Services
	Service definitions are semantically equivalent to defining an interface (or a pure virtual abstract class) in object-oriented programming. The Thrift compiler generates fully functional client and server stubs that implement the interface.
	
Typedefs
	Thrift supports C/C++ style typedefs.
	
Enums
	When you’re defining a message type, you might want one of its fields to only have one of a pre-defined list of values. For example, let’s say you want to add a tweetType field for each Tweet, where the tweetType can be TWEET, RETWEET, DM, or REPLY. You can do this very simply by adding an enum to your message definition?—?a field with an enum type can only have one of a specified set of constants as its value (if you try to provide a different value, the parser will treat it like an unknown field). In the following example we’ve added an enum called TweetType with all the possible values, and a field of the same type:
		enum TweetType {
			TWEET,       // 1
			RETWEET = 2, // 2
			DM = 0xa,    // 3
			REPLY
			}                // 4
			
Namespaces

	namespaces in Thrift are akin to namespaces in C++ or packages in Java?—?they offer a convenient way of organizing (or isolating) your code. Namespaces may also be used to prevent name clashes between type definitions.

	Because each language has its own package-like mechanisms (e.g. Python has modules), Thrift allows you to customize the namespace behavior on a per-language basis:

	namespace cpp com.example.project  // 1
	namespace java com.example.project // 2
	
Includes
	It is often useful to split up Thrift definitions in separate files to ease maintainance, enable reuse and improve modularity/organization. Thrift allows files to include other Thrift files. Included files are looked up in the current directory and by searching relative to any paths specified with the -I compiler flag.

	Included objects are accessed using the name of the Thrift file as a prefix.

	include "tweet.thrift"           // 1
	...
	struct TweetSearchResult {
		1: list<tweet.Tweet> tweets; // 2
	}
	1	File names must be quoted; again notice the absent semi-colon.
	2	Note the tweet prefix.
	
Constants
	Thrift lets you define constants for use across languages. Complex types and structs are specified using JSON notation.

	const i32 INT_CONST = 1234;    // 1
	const map<string,string> MAP_CONST = {"hello": "world", "goodnight": "moon"}
	
Define Structs
	Structs (also known as messages in some systems) are the basic building blocks in a Thrift IDL. A struct is composed of fields; each field has a unique integer identifier, a type, a name and an optional default value.

	Consider a simple example. Suppose you want to build a Twitter-like service. Here is how you might define a Tweet:

	struct Location {                            // 5
		1: required double latitude;
		2: required double longitude;
	}

	struct Tweet {
		1: required i32 userId;                  // 1
		2: required string userName;             // 2
		3: required string text;
		4: optional Location loc;                // 3
		16: optional string language = "english" // 4
	}
	1	Every field must have a unique, positive integer identifier
	2	Fields may be marked as required or optional
	3	Structs may contain other structs
	4	You may specify an optional "default" value for a field
	5	Multiple structs can be defined and referred to within the same Thrift file
	As you can see, each field in the message definition has a unique numbered tag. These tags are used to identify your fields in the wire format, and should not be changed once your message type is in use.

	Fields may be marked required or optional with obvious meanings for well-formed structs. Thrift will complain if required fields have not been set in a struct, for instance. If an optional field has not been set in the struct, it will not be serialized over the wire. If a default value has been specified for an optional field, the field is assigned the default value when the struct is parsed and no value has been explicitly assigned for that field.

	Unlike services, structs do not support inheritance, that is, a struct may not extend other structs.

	Warning	
	Required Is Forever
	You should be very careful about marking fields as required. If at some point you wish to stop writing or sending a required field, it will be problematic to change the field to an optional field?—?old readers will consider messages without this field to be incomplete and may reject or drop them unintentionally. You should consider writing application-specific custom validation routines for your buffers instead. Some have come to the conclusion that using required does more harm than good; they prefer to use only optional. However, this view is not universal.
	
Defining Services
	While there are several popular serialization/deserialization frameworks (like Protocol Buffers), there are few frameworks that provide out-of-the-box support for RPC-based services across multiple languages. This is one of the major attractions of Thrift.

	Think of service definitions as Java interfaces?—?you need to supply a name and signatures for the methods. Optionally, a service may extend other services.

	The Thrift compiler will generate service interface code (for the server) and stubs (for the client) in your chosen language. Thrift ships with RPC libraries for most languages that you can then use to run your client and server.

	service Twitter {
		// A method definition looks like C code. It has a return type, arguments,
		// and optionally a list of exceptions that it may throw. Note that argument
		// lists and exception list are specified using the exact same syntax as
		// field lists in structs.
		void ping(),                                                             // 1
		bool postTweet(1:Tweet tweet) throws (1:TwitterUnavailable unavailable), // 2
		TweetSearchResult searchTweets(1:string query);                          // 3

		// The 'oneway' modifier indicates that the client only makes a request and
		// does not wait for any response at all. Oneway methods MUST be void.
		oneway void zip()                                                        // 4
	}
	
		Confusingly, method definitions can be terminated using comma or semi-colon
		2	Arguments can be primitive types or structs
		3	Likewise for return types
		4	void is a valid return type for functions
		Note that the argument lists (and exception lists) for functions are specified exactly like structs.

		Services support inheritance: a service may optionally inherit from another service using the extends keyword.
		
		keyword oneway.
		

		
https://blog.csdn.net/kesonyk/article/details/50924489

thrift结构：

TServer:TServer在Thrift框架中的主要任务是接收Client的请求，并转到某个TProcessor上进行请求处理。针对不同的访问规模,Thrift提供了不同的TServer模型。Thrift目前支持的Server模型包括：

1.  TSimpleServer：使用阻塞IO的单线程服务器，主要用于调试
2.  TThreadedServer：使用阻塞IO的多线程服务器。每一个请求都在一个线程里处理，并发访问情况下会有很多线程同时在运行。
3.  TThreadPoolServer：使用阻塞IO的多线程服务器，使用线程池管理处理线程。
4.  TNonBlockingServer：使用非阻塞IO的多线程服务器，使用少量线程既可以完成大并发量的请求响应，必须使用TFramedTransport。


TTransport:Thrift最底层的传输可以使用Socket，File和Zip来实现，Memory传输在Thrift之前的版本里有支持，Thrift 0.8里面就不再支持了。TTransport是与底层数据传输紧密相关的传输层。每一种支持的底层传输方式都存在一个与之对应的TTransport。在TTransport这一层，数据是按字节流(Byte Stream)方式处理的，即传输层看到的是一个又一个的字节，并把这些字节按照顺序发送和接收。TTransport并不了解它所传输的数据是什么类型，实际上传输层也不关心数据是什么类型，只需要按照字节方式对数据进行发送和接收即可。数据类型的解析在TProtocol这一层完成。

TSocket：使用阻塞的TCP Socket进行数据传输，也是最常见的模式
THttpTransport：采用Http传输协议进行数据传输
TFileTransport：文件（日志）传输类，允许client将文件传给server，允许server将收到的数据写到文件中
TZlibTransport：与其他的TTransport配合使用，压缩后对数据进行传输，或者将收到的数据解压

下面几个类主要是对上面几个类地装饰（采用了装饰模式），以提高传输效率。
TBufferedTransport：对某个Transport对象操作的数据进行buffer，即从buffer中读取数据进行传输，或者将数据直接写入buffer
TFramedTransport：同TBufferedTransport类似，也会对相关数据进行buffer，同时，它支持定长数据发送和接收（按块的大小，进行传输）。
TMemoryBuffer：从一个缓冲区中读写数据


TProtocol:TProtocol的主要任务是把TTransport中的字节流转化为数据流(Data Stream),在TProtocol这一层就会出现具有数据类型的数据，如整型，浮点数，字符串，结构体等。TProtocol中数据虽然有了数据类型，但是TProtocol只会按照指定类型将数据读出和写入，而对于数据的真正用途，需要在Thrift自动生成的Server和Client中里处理。

Thrift 可以让用户选择客户端与服务端之间传输通信协议的类别，在传输协议上总体划分为文本 (text) 和二进制 (binary) 传输协议，为节约带宽，提高传输效率，一般情况下使用二进制类型的传输协议为多数。常用协议有以下几种：

TBinaryProtocol: 二进制格式
TCompactProtocol: 高效率的、密集的二进制编码格式
TJSONProtocol: 使用 JSON 的数据编码协议进行数据传输
TSimpleJSONProtocol: 提供JSON只写协议, 生成的文件很容易通过脚本语言解析。
TDebugProtocol: 使用易懂的可读的文本格式，以便于debug

TProcessor:

	Processor是由Thrift生成的TProcessor的子类，主要对TServer中一次请求的 InputProtocol和OutputTProtocol进行操作，也就是从InputProtocol中读出Client的请求数据，向OutputProtcol中写入用户逻辑的返回值。Processor是TServer从Thrift框架转到用户逻辑的关键流程。同时TProcessor.process是一个非常关键的处理函数，因为Client所有的RPC调用都会经过该函数处理并转发。

Thrift在生成Processor的时候，会遵守一些命名规则，可以参考 Thrift Generator部分的介绍。

TProcessor对于一次RPC调用的处理过程可以概括为：

TServer接收到RPC请求之后，调用TProcessor.process进行处理

TProcessor.process首先调用TTransport.readMessageBegin接口，读出RPC调用的名称和RPC调用类型。如果RPC调用类型是RPC Call，则调用TProcessor.process_fn继续处理，对于未知的RPC调用类型，则抛出异常。

TProcessor.process_fn根据RPC调用名称到自己的processMap中查找对应的RPC处理函数。如果存在对应的RPC处理函数，则调用该处理函数继续进行请求响应。不存在则抛出异常。

a) 在这一步调用的处理函数，并不是最终的用户逻辑。而是对用户逻辑的一个包装。

b) processMap是一个标准的std::map。Key为RPC名称。Value是对应的RPC处理函数的函数指针。 processMap的初始化是在Processor初始化的时候进行的。Thrift虽然没有提供对processMap做修改的API，但是仍可以通过继承TProcessor来实现运行时对processMap进行修改，以达到打开或关闭某些RPC调用的目的。

RPC处理函数是RPC请求处理的最后一个步骤，它主要完成以下三个步骤：
a) 调用RPC请求参数的解析类，从TProtocol中读入数据完成参数解析。不管RPC调用的参数有多少个，Thrift都会将参数放到一个Struct中去。Thrift会检查读出参数的字段ID和字段类型是否与要求的参数匹配。对于不符合要求的参数都会跳过。这样，RPC接口发生变化之后，旧的处理函数在不做修改的情况，可以通过跳过不认识的参数，来继续提供服务。进而在RPC框架中提供了接口的多Version支持。

b) 参数解析完成之后，调用用户逻辑，完成真正的请求响应。

c) 用户逻辑的返回值使用返回值打包类进行打包，写入TProtocol。


ThriftClient
	了解了上述提到的TProtocol，TTransport，参数解析类和返回值打包类的概念，Thrift的Client就会变得非常容易理解。	ThriftClient跟TProcessor一样都主要操作InputProtocol和OutputProtocol，不同的是ThritClient将RPC调用分为Send和receive两个步骤。
	Send步骤，将用户的调用参数作为一个整体的Struct写入TProcotol，并发送到TServer。	Send结束之后，ThriftClient便立刻进入Receive状态等待TServer的相应。对于TServer返回的响应，使用返回值解析类进行返回值解析，完成RPC调用。
	
Thrift 版本
	Thrift的RPC接口支持不同Version之间的兼容性。需要注意的是：
	1.  不要修改已经存在数据的字段编号
	2.  新加的字段必须是optional的。以保证新生成的代码可以序列旧的Message。同时尽量为新加的字段添加默认值。
	3.  Required字段不能被删除。可以字段前加上"OBSOLETE_"来提醒后续用户该字段已经不再使用，同时字段编号不能复用。
	4.  修改默认值对Version控制没有影响。因为默认值不会被传输，而是由数据的接受者来决定。

有四种可能发生版本不匹配的情况：

新加的域，旧客户端，新服务器。这种情况下，旧客户端不发送新的域，新服务器认出该域未设置，并对过时的请求执行默认行为。

移除的域，旧客户端，新服务器。这种情况下，旧客户端发送已被移除的域，而新服务器简单地无视它。

新加的域，新客户端，旧服务器。新客户端发送一个旧服务器不识别的域。旧服务器简单地无视该域，像平时一样进行处理。

移除的域，新客户端，旧服务器。这是最危险的情况，因为旧服务器不太可能对丢失的域执行适当的默认行为。这种情形下，建议在新客户端之前，先推出新服务器。

Nonblocking Operation（非阻塞操作）
尽管Thrift传输接口更直接地映射到一个阻塞I/O模型，然而Thrift基于libevent和TFramedTransport，用C++实现了一个高性能的TNonBlockingServer。这是通过使用状态机，把所有I/O移动到一个严密的事件循环中来实现的。实质上，事件循环将成帧的请求读入TMemoryBuffer对象。一旦全部请求ready，它们会被分发给TProcessor对象，该对象能直接读取内存中的数据。


https://blog.csdn.net/kesonyk/article/details/50924489

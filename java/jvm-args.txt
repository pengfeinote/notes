-Xms128M:初始堆内存，默认是物理内存的1/64
-Xmx512M:最大堆内存，默认是物理内存1/4
-Xmn1024M:年轻代大小
-Xss1M:每个线程堆栈1M
-XX:NewRatio=4:年轻代(一个Eden和两个Survivor)与年老代的比值，此处年轻代与年老代比值为1:4
-XX:SurvivorRatio=4:年轻代中SurvivorRatio的比值，此处Eden和SurvivorRatio比值为4:2
-XX:PermSize=64M:非堆内存初始值,默认1/64
-XX:MaxPermSize=128M:最大非堆内存
-XX:MaxTenuringThreshold=0:设置垃圾最大年龄。如果设置为0的话，则年轻代对象不经过Survivor区，直接进入年老代。对于年老代比较多的应用，可以提高效率。如果将此值设置为一个较大值，则年轻代对象会在Survivor区进行多次复制，这样可以增加对象再年轻代的存活时间，增加在年轻代即被回收的概论。
-XX:+UseParallelGC:并发执行GC
-XX:+UseConcMarkSweepGC 这个参数表示对于老年代的回收采用CMS算法
-XX:+UseStringDeduplication: 开启消除重复字符串选项，当jvm启动时传递了这个参数的时候，jvm在做gc时会做重复字符串的消除，JVM会检查内存中的所有对象，然后识别出重复的字符串对象并消除之。
	* 该参数只适用于G1收集器;
	* 主要是用来消除长时间存活的重复字符串对象，它不会对短期存活的对象做去重。
	* 如果字符串的生命周期很短，很可能还没来记得做去重就已经死亡了;
	* 默认情况下，一个字符串对象经过3次GC以后还存活才会被列为去重的候选对象，可以用-XX:StringDeduplicationAgeThreshold来改变经历的GC的次数;
	* 因为是在GC的时候做的字符串去重，因此可能会增加GC的停顿时间。但是，如果有很高的去重率可能会抵消掉这部分影响，因为去重以后可以减轻GC的其他阶段的时间花费，同时还可以减少GC的频率（因为减少了堆的大小），可以用gceasy之类的工具来分析下GC停顿时间;
	* -XX:+UseStringDeduplication并不会消除重复字符串的引用本身，它只会替换底层的char[]，消除重复字符串对象只需要对value字段进行重新引用赋值即可， 差不多就是这个意思：aString.value = anotherString.value。任何一个String对象在内存中最少占用24个字节，启用这个参数以后如果有很多短的重复字符串对象的话会大大的节省内存。
	* 只有从Java 8 update 20以后才开始支持这个参数，因此，如果你的JDK版本比较老的话就没法用这个功能了
	* 如果你想查看字符串去重的一些统计信息，比如说去重花了多长时间、多少重复字符串被去重、节省了多少内存等等，可以传递-XX:+PrintStringDeduplicationStatistics这个参数给JVM，在GC日志中就可以打印出这些信息来。

gc log相关参数：
-XX:+PrintGCDetails
-XX:+PrintHeapAtGC
-XX:+PrintGCDateStamps
-XX:+PrintTenuringDistribution
-verbose:gc
-Xloggc:logs/gc.log
-XX:MaxDirectMemorySize(堆外内存的最大大小):用于设置New I/O(java.nio) direct-buffer allocations的最大大小，size的单位可以使用k/K、m/M、g/G；如果没有设置该参数则默认值为0，意味着JVM自己自动给NIO direct-buffer allocations选择最大大小

堆外内存：
	堆外内存指的是不在java heap区的一块内存，传统的java进程中，申请内存一般是在java heap区，而堆外内存的使用不在java heap区，而且大小不受-Xmx等参数的管控。
	为什么使用堆外内存：
		linux操作系统将内存分为用户区和内核区，用户的进程运行在用户区内存，操作系统运行在内核区，如果需要内核操作，则调用操作系统的native方法，切换到内核态。当java进程需要将一个大文件写入，在原理上，前者可以看出分配的buffer是在heap区域的，其实真正flush到远程的时候会先拷贝得到直接内存，再做下一步操作（考虑细节还会到OS级别的内核区直接内存），其实发送静态文件最快速的方法是通过OS级别的send_file，只会经过OS一个内核拷贝，而不会来回拷贝；在NIO的框架下，很多框架会采用DirectByteBuffer来操作，这样分配的内存不再是在java heap上，而是在C heap上，经过性能测试，可以得到非常快速的网络交互，在大量的网络交互下，一般速度会比HeapByteBuffer要快速好几倍。在JDK 1.4 中新加入了NIO（New Input/Output）类，引入了一种基于通道（Channel）与缓冲区（Buffer）的I/O 方式，它可以使用Native 函数库直接分配堆外内存，然后通过一个存储在Java 堆里面的DirectByteBuffer 对象作为这块内存的引用进行操作。这样能在一些场景中显著提高性能，因为避免了在Java 堆和Native 堆中来回复制数据。同时，可以避免堆外内存的jvm GC，避免长时间停顿
	使用场景：大的IO操作
	堆外内存管理:
		ByteBuffer.allocateDirect申请 
		System.gc() 显示GC可以清理堆外内存
		或DirectBuffer.cleaner().clean()清理
	堆外内存缺点：
		自己管理内存（类似C++），容易造成内存泄漏
		不适合存储复杂对象
			

	

http://unixboy.iteye.com/blog/174173/

java 8: permGen vs metaspace

hos spot jvm: jit编译器，memory management， jvm运行时

memory management：内存管理(主要包括gc)


内存分代：

新生代 老年代 持久带（元数据区）

内存阶段：

minor gc Full gc

内存算法：

serial gc, parnew gc parold gc, cms, g1

调优指标：

吞吐量 响应时间 内存占用

调优根据：
gc logs

调优建议配置：

gc分析，监测相关命令

jvm参数：
https://www.cnblogs.com/redcreen/archive/2011/05/04/2037057.html

-XX:+PrintGCApplicationStoppedTime
-XX:MaxTenuringThreshold=6
最大的晋升阈值
-XX:+UseCompressedOops
压缩64位为32位
-XX:InitialTenuringThreshold=1
晋升阈值的初始值
-XX:PretenureSizeThreshold=
多大的对象会直接分配到老年代，无默认值，建议由jvm优化
-XX:+PrintAdaptiveSizePolicy
生成消息的survivor空间占用日志


-XX:+PrintGCApplicationStoppedTime: 打印应用程序STW的状态
2017-11-16T16:26:21.477+0800: Total time for which application threads were stopped: 0.5157823 seconds, Stopping threads took: 0.0000128 sec
onds
解读：application threads stopped的时间表示应用暂停时间，Stopping threads took 的时间表示等待所有的应用线程都到达安全点花费的时间。
实际上，触发STW暂停的原因除了垃圾回收外，还有一些其他的操作会触发STW，例如一些JIT活动、偏向锁擦除、特定的JVMTI操作，以及许多场景也可能会导致应用程序暂停



一：内存结构

总堆：
-Xms1024M  初始（最小）内存
-Xmx1024M  最大内存
-Xss1M     线程栈的大小


新生代：
eden区(当你在程序中new一个对象时，在eden区申请内存，为保证new对象性能。每个线程自己有一部分空间（TLAB:Thread Local Allocation Buffer）属于eden区，需要堆空间时在自己的空间中申请内存，但如果对象过大，或tlab用完时，还会去eden中申请，因为eden是多线程共享，所以申请对象开销较大)
两个survivor区(survivor区存放经历过minor gc后存活下来，但还不够条件进入老年代的对象)

调整新生代大小的参数：
1：sun官方推荐新生代为整个堆内存的3/8
2: -Xmn2048M设置新生代大小为2G
3: -XX:NewRatio=4 设置年轻代与年老代的比值，为4代表 年轻代与年老代比值为 1:4
4: -XX:SurvivorRatio=4 设置eden区与survivor区的比值。为4代表两个survivor与eden的比值为2:4
5: 新生代不是越大越好，太大会挤压老年代的大小，太大的话会降低minor gc的频率，但增加每次minor gc的持续时间


老年代：
存放多次gc仍然无法回收的对象。(大对象也可能会直接在老年代中生成，避免from区与to区的大对象迁移)


永久代：
主要存放（类元数据，运行时常量池，字面量和符号引用）

元数据：
java 8移除了永久带，使用元数据区，元数据区不再存放常量字符串和常量引用。使用元数据，避免了永久带的OOM，元数据的最大大小
-XX:MetaspaceSize=128M -XX:MaxMetaspaceSize=元数据区最大空间，超过时会导致垃圾回收，卸载已经不用的类或class文件。默认最大值无上限


二：分代垃圾回收

minor gc：

触发条件：
1：eden区满，无法分配新的对象，会触发minor gc
2：Full gc触发时，有时会先进行minor gc
3: minor gc完成时，eden区 和一个survivor区是空的
4：minor gc会重新整理survivor区的内存，所以不会产生内存碎片
5：对eden区和s-from区进行标记，复制操作，将存活对象复制到s-to
6：在minor gc时，如果s-from的某个对象，达到了提升阈值，会直接被移动到老年代。
7：minor gc的可用算法：serial gc，parallel young gc, parallel new gc
8:-XX:+PrintTenuringDistribution 查看每次minor GC后新的存活周期的阈值

Desired survivor size 134217728 bytes(期望survivor空间大小), new threshold 4 (新阈值)(max 4)
- age   1:    8431024 bytes(年龄1对象),    8431024 total(年龄不大于1的对象)
- age   2:    7015392 bytes,   15446416 total（年龄不大于2的对象）
- age   3:    7211336 bytes,   22657752 total
- age   4:    6670528 bytes,   29328280 total


Full gc：

触发条件：
1：老年代空间不足，或者在老年代分配对象失败（对象比较大）
2: 手动调用System.gc();
3: 永久代空间不足
4: promotion failed 与 concurrent mode failure 
5: 统计得到的Minor GC晋升到旧生代的平均大小大于老年代的剩余空间


三：垃圾回收算法

1: serial gc(串行垃圾回收)

	特点：单线程的垃圾收集器，cpu利用率最高，工作过程中jvm所有线程必须停止，适用于小型应用。client模式下的默认gc方式
	过程：标记-清扫算法，从root开始，扫描并标记活着的对象;清理不可达对象，保存活跃对象；从头开始存放活跃对象，整理内存空间，消除碎片。	
	适用阶段：minor gc, full gc皆可用
	log 解读：
	[GC (Allocation Failure) [DefNew: 69952K->8704K(78656K), 0.1744675 secs] 69952K->37089K(253440K), 0.1747038 secs] [Times: user=0.17 sys=0.01, real=0.17 secs]
	解读：GC (Allocation Failure)， eden区分配对象失败导致的minor gc；DefNew，使用的是Serial gc；69952K->8704K(78656K)，minor gc之后，新生代原空间―》新生代新空间（新生代总空间）；69952K->37089K(253440K)，minor gc前总内存占用-》minor gc后的总内存占用（java堆总大小）
	[Full GC (System.gc()) [Tenured: 28385K->644K(174784K), 0.0255748 secs] 93876K->644K(253440K), [Metaspace: 2696K->2696K(1056768K)], 0.0260341 secs] [Times: user=0.03 sys=0.00, real=0.03 secs]
	解读：Full GC (System.gc())，由系统调用触发的full gc；Tenured，serial gc老年代空间；28385K->644K(174784K)，full gc之后，老年代的空间使用情况；93876K->644K(253440K)，Full gc之后，java堆的内存使用情况；Metaspace: 2696K->2696K(1056768K)，full gc之后，元空间的使用情况
	jvm 参数：使用-XX:+UseSerialGC开启

2: parallel scavenge 收集器(并行收集器)
	过程：与serial相同，不过是多线程的
	特点：多CPU，多内存时使用
	适用阶段：仅适用于新生代
	log 解读：(见Parallel Old)
	如何优化：-XX:+UseParallelGC 指定GC算法使用（新生代Parallel Scavenge + 老年代Parallel Old），也是目前jvm的默认gc算法。-XX:ParallelGCThreads指定GC 线程数(http://blog.csdn.net/zhangren07/article/details/6270895)

3: parallel old 收集器（老年代并行收集器）
	过程：将老生代划分为并行线程个数的区域（regions）；并行进行存活对象扫描和标记；单线程对各区域进行扫描，标记需要压缩移动的区域；并行进行对象移动和区域不存活对象的回收。
	自适应调整：jvm默认使用-XX:+UseParallelGC，当使用该模式是，jvm开启自适应调整-XX:+UseAdaptiveSizePolicy。开启自适应调整后，eden区和survivor区的大小不固定，jvm根据系统的运行情况自适应调整各内存区域大小。

4: parallel new收集器 （新生代并行收集器）
	配合CMS使用
	与并行回收GC（Parallel Scavenge）的区别在于并行GC（ParNew）必须配合老生代使用CMS GC。原因是CMS GC在进行老生代GC时，有些过程是并发执行的。如果此时发生了Minor GC，需要进行相应处理，而并行回收GC（Parallel Scavenge）是没有做这些处理的。也正是如此，ParNew GC不可与并行的老生代GC同时使用。
?	配置方式：在配置为CMS GC的情况下，新生代默认使用并行GC（ParNew）方式，也可以通过-XX:+UseParNewGC来指定。


3: cms(concurrent mark sweep) gc

	过程：(http://blog.csdn.net/baidu_33116785/article/details/53258822)
	1：inital remark(STW)
	2：concurrent remark
	3：concurrent pre clean(STW)
	4：concurrent abortable preclean
	5：final remark
	6：concurrent sweep
	7: concurrent reset
	特点：适用于响应时间优先的进程，
	适用阶段：只用于老年代内存回收
	log 解读：
		ParNew:2017-11-15T15:38:18.463+0800: 167657.198: [GC2017-11-15T15:38:18.463+0800: 167657.198: [ParNew: 853353K->14150K(943744K), 0.0137330 secs] 862773K->23636K(959144K), 0.0138320 secs] [Times: user=0.02 sys=0.00, real=0.02 secs]
		initial mark:2017-11-14T00:07:02.509+0800: 25381.244: [GC [1 CMS-initial-mark: 9093K(13056K)] 33052K(956800K), 0.0174070 secs] [Times: user=0.01 sys=0.01, real=0.01 secs]
			初始化标记阶段（只标记与GC roots直接关联的对象），两组数据：老年代占用（老年代容量） 堆占用（堆容量）
		concurrent mark:2017-11-14T00:07:02.527+0800: 25381.262: [CMS-concurrent-mark-start]
2017-11-14T00:07:02.650+0800: 25381.385: [CMS-concurrent-mark: 0.121/0.123 secs] [Times: user=0.04 sys=0.08, real=0.13 secs]
			并发标记开始，并发标记耗时。
		concurrent preclean:2017-11-14T00:07:02.650+0800: 25381.385: [CMS-concurrent-preclean-start]
2017-11-14T00:07:02.651+0800: 25381.386: [CMS-concurrent-preclean: 0.000/0.000 secs] [Times: user=0.00 sys=0.00, real=0.00 secs]
			预清理开始，预清理耗时
		concurrent abortable preclean:2017-11-14T00:07:09.589+0800: 25388.324: [CMS-concurrent-abortable-preclean-start]
 CMS: abort preclean due to time 2017-11-14T00:07:14.620+0800: 25393.355: [CMS-concurrent-abortable-preclean: 2.028/5.031 secs] [Times: user=2.05 sys=0.00, real=5.03 secs]
			可中止预清理开始，可中止预清理因为时间到了所以中止，所用时间
		final remark:2017-11-14T00:07:14.620+0800: 25393.355: [GC[YG occupancy: 42750 K (943744 K)]2017-11-14T00:07:14.620+0800: 25393.355: [Rescan (parallel) , 0.0089030 secs]2017-11-14T00:07:14.629+0800: 25393.364: [weak refs processing, 0.0000180 secs]2017-11-14T00:07:14.629+0800: 25393.364: [scrub string table, 0.0006880 secs] [1 CMS-remark: 9007K(15016K)] 51758K(958760K), 0.0096710 secs] [Times: user=0.03 sys=0.00, real=0.01 secs]
			YG occupancy：年轻代的内存情况
			Rescan (parallel)：并行扫描的耗时
			weak refs processing：处理弱引用的时间
			scrub string table：cleaning up symbol and string tables which hold class-level metadata and internalized string respectively
			9007K(15016K)：清理后老年代内存情况
			51758K(958760K)：清理后java堆内存情况
		concurrent sweep:2017-11-14T00:07:14.630+0800: 25393.365: [CMS-concurrent-sweep-start]
2017-11-14T00:07:14.634+0800: 25393.369: [CMS-concurrent-sweep: 0.004/0.004 secs] [Times: user=0.00 sys=0.00, real=0.01 secs]
			并发清除阶段开始，时间消耗
		concurrent reset:2017-11-14T00:07:14.634+0800: 25393.369: [CMS-concurrent-reset-start]
2017-11-14T00:07:14.637+0800: 25393.372: [CMS-concurrent-reset: 0.003/0.003 secs] [Times: user=0.01 sys=0.00, real=0.00 secs]
			并发重置阶段开始，时间消耗

		
	如何优化：-XX:+UseConcMarkSweepGC使用cms；-XX:CMSFullGCsBeforeCompaction=5，5次full gc之后进行内存压缩；-XX+UseCMSCompactAtFullCollection full gc时压缩内存；-XX:+UseCMSInitiatingOccupancyOnly，禁止jvm自动触发gc，当老年代内存占用达到一定比例时，开始cms gc；-XX:CMSInitiatingOccupancyFraction=70，当老年代内存占用达到70%时，使用cms gc。-XX:CMSInitiatingPermOccupancyFraction，perm区到多少比例时，启动cms gc
4: g1 gc

	过程：
	特点：
	适用阶段：
	log 解读：


	如何优化：




吞吐量优化：


响应时间优化：


CMS优化：


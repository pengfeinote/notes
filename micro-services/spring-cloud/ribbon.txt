## Ribbon

### Ribbon介绍

Ribbon是netflix的一个客户端负载均衡工具

可以使用ribbon+RestTemplate来进行consumer请求，也可以使用feign，feign中使用了ribbon的负载均衡策略。

只需要提供给ribbon服务列表，ribbon可以进行负载均衡，ribbon还可以配合eureka进行负载均衡调用

### 负载均衡策略及使用方法

#### ribbon的负载均衡策略

* RoundRobinRule

	轮询

* RandomRule

	随机访问
	
* AvailabilityFilteringRule

	会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务,以及并发的连接数量
超过阈值的服务,然后对剩余的服务列表按照轮询策略进行访问;

* WeightedResponseTimeRule

	根据平均响应时间计算所有服务的权重,响应时间越快,服务权重越大,被选中的机率越高;
	刚启动时,如果统计信息不足,则使用RoundRobinRule策略,等统计信息足够时,会切换到WeightedResponseTimeRule

* RetryRule
	
	先按照RoundRobinRule的策略获取服务,如果获取服务失败,则在指定时间内会进行重试,获取可用的服务;
	
* BestAvailableRule
	
	会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务,然后选择一个并发量最小的服务;
	
* ZoneAvoidanceRule
	
	默认规则,复合判断server所在区域的性能和server的可用性选择服务器;
	
#### ribbon+eureka使用方法
	
在@Configuration类上添加@RibbonClient(如果有多个客户端，可以使用@RibbonClients)注解，为client配置一个name和一个@Configuration类，@Configuration类中有Ribbon的配置，可以配置以下内容：

* IRule配置负载均衡策略
* ILoadBalancer 自定义负载均衡器
* IPing 心跳检测类
* ServerList server列表
* ServerListFilter   server过滤器

Ribbon配合Eureka可以很方便的实现客户端复杂均衡：

```java
  @Bean
  @LoadBalanced
  public RestTemplate restTemplate() {
    return new RestTemplate();
  }

  @Bean
  public IRule ribbonRule() {
    return new RandomRule();
  }

  @Autowired
  @LoadBalanced
  private RestTemplate restTemplate;

  @HystrixCommand(fallbackMethod = "getUserFallback", commandProperties = {@HystrixProperty(name = "execution.isolation.thread.timeoutInMilliseconds", value = "1000")})
  public String getUser() {
    return restTemplate.getForObject("http://user-service/user", String.class);
  }
```

### 实现方法

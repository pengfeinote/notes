添加用户：
	useradd 选项 用户名
	代码:
	-c comment 指定一段注释性描述。
	-d 目录 指定用户主目录，如果此目录不存在，则同时使用-m选项，可以创建主目录。
	-g 用户组 指定用户所属的用户组。
	-G 用户组，用户组 指定用户所属的附加组。
	-s Shell文件 指定用户的登录Shell。
	-u 用户号 指定用户的用户号，如果同时有-o选项，则可以重复使用其他用户的标识号。
	
删除用户：
	userdel 选项 用户名
	常用的选项是-r，它的作用是把用户的主目录一起删除。
	
修改用户：
	usermod 选项 用户名
	-l 新用户名
	
用户口令管理：
	passwd 选项 用户名
	代码:
	-l 锁定口令，即禁用账号。
	-u 口令解锁。
	-d 使账号无口令。
	-f 强迫用户下次登录时修改口令。
	
	
用户sudo：
/etc/sudoers与/etc/passwd

/etc/sudoers:
对linux有一定了解的人多少也会知道点关于sudo命令。sudo命令核心思想是权限的赋予 ，即某个命令的所属用户不是你自己，而你却有权限执行它。但是我们需要注意的是，虽然你有权限执行这个命令，但是在执行的时候却仍是以这个命令本身所属用户来完成的[注释1]。(su命令类似sudo命令，但是两者的差别在于前者su是一个粗粒度权限赋予，
对su最好的理解我觉得是change user running command permanent。即永久的切换到了su过去的用户，然后以这个su到的新用户干它能干的一切事情，而sudo则是指在执行某个命令的时候临时切换到这个命令的所属用户执行[注释1]，而且sudo可以做到以单个命令为单位将权限赋予给其他用户，相比su显得更加灵活。)

大概了解了sudo的功能，那么你知道怎么配置sudo吗？下面来简要说明一下：
配置sudo的配置文件在/etc/sudoers里面，一般通过visudo命令来安全打开编辑。查看/etc/sudoers的用法可以使用命令: man 5 sudoers。在/etc/sudoers文件里面主要包括这两部分：
1. 别名设置
别名主要包括这几种：User_Alias,Host_Alias,Runas_Alias,Cmnd_Alias，分别是用户别名，主机别名，运行用户别名，命令别名。设置这几个别名的命令主要是为了配置方便，这个很类似linux用户群组或是数据库中角色的作用，有了别名便可以批量的赋予权限。
设置方法 Alias_Type alias_name = name1, name2, name3， 例如User_Alias User1 = user1, user2, user3。其他类型的alias设置方法类似。
2. 真正的sudo entry
这个就是真正配置哪些用户可以使用哪些命令了（你甚至可以不使用别名设置那部分）。
格式为：用户名(用户别名) 主机名(主机别名)=[(运行用户或是Runas_Alias)可选] [tag可选]  可以执行的命令(或Cmmd_Alias)  这样描述语法很生硬，不易理解，举例子
user1  host1 = /bin/kill                                                                              # user1 可以在host1上使用命令/bin/kill
user1  host1 = NOPASSWD: /bin/kill                                                     # user1 可以在host1上使用命令/bin/kill 同时可以不必输入密码(这里就是使用了NOPASSWD
                                                                                                                      # 这个tag，默认是PASSWD)
user1  host1 = NOPASSWD: /bin/kill , PASSWORD: /bin/ls              # user1 可以在host1上使用命令/bin/kill无需输入密码，但是使用/bin/ls则需要输入密码
user1  host1 = (opterator) /bin/kill                                                          # user1 可以在host1上使用命令/bin/kill但是必须是以operator用户运行这个命令，等价于
                                                                                                                      # su -u opertor /bin/kill
user1  host1 = (:group_name) /bin/kill                                                 # user1 可以在host1上使用命令/bin/kill,且必须以group_name这个用户群组里面的用户来运行。
%group_name host1 = /bin/kill                                                              # 所有group_name里面的用户都可以在host1上执行/bin/kill(linux中一般代表整个用户群组用

                                                                                                                     # %group_name)



再举个实际例子，我之前对sudo su这个命令不理解，为什么我可以直接就su到root用户了呢，连密码都不需要？查看了一下sudoers文件才知道原来里面有这么一行：
xxx     ALL=NOPASSWD: /bin/su


注释1：
在linux中每个进程都是有与之相关的UID,GID，分别为有效UID,真实UID，有效GID,真实GID。有效UID,GID是用来判断权限，而真实UID,GID是用来记账(哪个进程属于哪个用户，或记录日志等等)。当配置了sudo entry后，有效UID里面就包含了这个被配置的用户UID，因而权限验证的时候就可以通过。


参考文章：
1. Linux技术管理手册
2. Unix高级环境编程
http://blog.51cto.com/lixin15/1700128

/etc/passwd:
https://blog.csdn.net/jb19900111/article/details/13507825

  给linux系统添加一个帐号:
[plain] view plain copy
useradd -g mysql -d /home/test -m test(:新建一个用户test, 属于mysql组,开始目录是/home/test)  
[plain] view plain copy
useradd -g mysql -d /home/test -m test(:新建一个用户test, 属于mysql组,开始目录是/home/test)  
   然后进入 /etc/passwd,可以看到如下信息,在最后一行可以看到刚加的用户的信息。如下
[plain] view plain copy
root:x:0:0:root:/root:/bin/bash   
sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin  
dovecot:x:97:97:dovecot:/usr/libexec/dovecot:/sbin/nologin  
webalizer:x:67:67:Webalizer:/var/www/usage:/sbin/nologin  
squid:x:23:23::/var/spool/squid:/sbin/nologin  
pcap:x:77:77::/var/arpwatch:/sbin/nologin  
haldaemon:x:68:68:HAL daemon:/:/sbin/nologin  
xfs:x:43:43:X Font Server:/etc/X11/fs:/sbin/nologin  
hsqldb:x:96:96::/var/lib/hsqldb:/sbin/nologin  
gdm:x:42:42::/var/gdm:/sbin/nologin  
hzmc:x:500:500:hzmc:/home/hzmc:/bin/bash  
mysql:x:501:501::/home/mysql:/bin/bash  
chenhua:x:503:501::/home/chenhua:/bin/bash  
test:x:504:501::/home/test:/bin/bash  
[plain] view plain copy
root:x:0:0:root:/root:/bin/bash   
sshd:x:74:74:Privilege-separated SSH:/var/empty/sshd:/sbin/nologin  
dovecot:x:97:97:dovecot:/usr/libexec/dovecot:/sbin/nologin  
webalizer:x:67:67:Webalizer:/var/www/usage:/sbin/nologin  
squid:x:23:23::/var/spool/squid:/sbin/nologin  
pcap:x:77:77::/var/arpwatch:/sbin/nologin  
haldaemon:x:68:68:HAL daemon:/:/sbin/nologin  
xfs:x:43:43:X Font Server:/etc/X11/fs:/sbin/nologin  
hsqldb:x:96:96::/var/lib/hsqldb:/sbin/nologin  
gdm:x:42:42::/var/gdm:/sbin/nologin  
hzmc:x:500:500:hzmc:/home/hzmc:/bin/bash  
mysql:x:501:501::/home/mysql:/bin/bash  
chenhua:x:503:501::/home/chenhua:/bin/bash  
test:x:504:501::/home/test:/bin/bash  
   可以看出/etc/passwd文件存放的是用户的信息,由6个分号组成的7个信息,解释如下
(1)用户名：用于区分不同的用户。在同一系统中注册名是惟一的。在很多系统上，该字段被限制在8个字符(字母或数字)的长度之内；并且要注意，通常在Linux系统中对字母大小写是敏感的。这与MSDOS/Windows是不一样的。 
(2)密码(已经加密)：系统用口令来验证用户的合法性。超级用户root或某些高级用户可以使用系统命令passwd来更改系统中所有用户的口令，普通用户也可以在登录系统后使用passwd命令来更改自己的口令。现在的Unix/Linux系统中，口令不再直接保存在passwd文件中，通常将passwd文件中的口令字段使用一个“x”来代替，将/etc /shadow作为真正的口令文件，用于保存包括个人口令在内的数据。当然shadow文件是不能被普通用户读取的，只有超级用户才有权读取。 
　　此外，需要注意的是，如果passwd字段中的第一个字符是“*”的话，那么，就表示该账号被查封了，系统不允许持有该账号的用户登录。 
(3)UID(用户标识)：UID是一个数值，是Linux系统中惟一的用户标识，用于区别不同的用户。在系统内部管理进程和文件保护时使用 UID字段。在Linux系统中，注册名和UID都可以用于标识用户，只不过对于系统来说UID更为重要；而对于用户来说注册名使用起来更方便。在某些特 定目的下，系统中可以存在多个拥有不同注册名、但UID相同的用户，事实上，这些使用不同注册名的用户实际上是同一个用户。 
(4)GID组标识：这是当前用户的缺省工作组标识。具有相似属性的多个用户可以被分配到同一个组内，每个组都有自己的组名，且以自己的组标 识号相区分。像UID一样，用户的组标识号也存放在passwd文件中。在现代的Unix/Linux中，每个用户可以同时属于多个组。除了在 passwd文件中指定其归属的基本组之外，还在/etc/group文件中指明一个组所包含用户。 
(5)用户全名或本地帐号：包含有关用户的一些信息，如用户的真实姓名、办公室地址、联系电话等。在Linux系统中，mail和finger等程序利用这些信息来标识系统的用户。 
(6)用户主目录(home_directory)：该字段定义了个人用户的主目录，当用户登录后，他的Shell将把该目录作为用户的工作目录。 在Unix/Linux系统中，超级用户root的工作目录为/root；而其它个人用户在/home目录下均有自己独立的工作环境，系统在该目录下为每 个用户配置了自己的主目录。个人用户的文件都放置在各自的主目录下。 
(7)登录使用的Shell：就是对登录命令进行解析的工具，Shell是当用户登录系统时运行的程序名称，通常是一个Shell程序的全路径名， 如/bin/bash(若为空格则缺省为/bin/sh)。 
    /etc/passwd文件的格式使系统管理员能要求用户定期地改变他们的口令. 在口令文件中可以看到,有些加密后的口令有逗号,逗号后有几个字符和一个 冒号.如: 　　
[plain] view plain copy
steve:xyDfccTrt180x,M.y8:0:0:admin:/:/bin/sh   
restrict:pomJk109Jky41,.1:0:0:admin:/:/bin/sh   
pat:xmotTVoyumjls:0:0:admin:/:/bin/sh   
[plain] view plain copy
steve:xyDfccTrt180x,M.y8:0:0:admin:/:/bin/sh   
restrict:pomJk109Jky41,.1:0:0:admin:/:/bin/sh   
pat:xmotTVoyumjls:0:0:admin:/:/bin/sh   
　　可以看到,steve的口令逗号后有4个字符,restrict有2个,pat没有逗号. 
　　逗号后第一个字符是口令有效期的最大周数,第二个字符决定了用户再次 修改口信之前,原口令应使用的最小周数(这就防止了用户改了新口令后立刻 又改回成老口令).其余字符表明口令最新修改时间. 
　　要能读懂口令中逗号后的信息,必须首先知道如何用passwd_esc计数,计 数的方法是: 
　　.=0 /=1 0-9=2-11 A-Z=12-37 a-z=38-63 
　　系统管理员必须将前两个字符放进/etc/passwd文件,以要求用户定期的 修改口令,另外两个字符当用户修改口令时,由passwd命令填入. 
　　注意:若想让用户修改口令,可在最后一次口令被修改时,放两个".",则下 一次用户登录时将被要求修改自己的口令. 
　　有两种特殊情况: 
　　最大周数(第一个字符)小于最小周数(第二个字符),则不允许用户修改 口令,仅超级用户可以修改用户的口令. 
　　第一个字符和第二个字符都是".",这时用户下次登录时被要求修改口 令,修改口令后,passwd命令将"."删除,此后再不会要求用户修改口令. 
　   /etc/passwd中UID信息很重要,系统使用UID而不是登录名区别用户.一般 来说,用户的UID应当是独一无二的,其他用户不应当有相同的UID数值.根据惯 例,从0到99的UID保留用作系统用户的UID(root,bin,uucp等). 
　  如果在/etc/passwd文件中有两个不同的入口项有相同的UID,则这两个用 户对相互的文件具有相同的存取权限. 
　   /etc /group文件含有关于小组的信息,/etc/passwd中的每个GID在本文件中 应当有相应的入口项,入口项中列出了小组名和小组中的用户.这样可方便地了 解每个小组的用户,否则必须根据GID在/etc/passwd文件中从头至尾地寻找同组 用户. 
　  /etc/group文件对小组的许可权限的控制并不是必要的,因为系统用UID,GID (取自/etc/passwd)决定文件存取权限,即使/etc/group文件不存在于系统中,具 有相同的GID用户也可以小组的存取许可权限共享文件. 
　 小组就像登录用户一样可以有口令.如果/etc/group文件入口项的第二个域 为非空,则将被认为是加密口令,newgrp命令将要求用户给出口令,然后将口令加 密,再与该域的加密口令比较. 
　  给小组建立口令一般不是个好作法.第一,如果小组内共享文件,若有某人猜 着小组口令,则该组的所有用户的文件就可能泄漏;其次,管理小组口令很费事, 因为对于小组没有类似的passwd命令.可用/usr/lib/makekey生成一个口令写入 /etc/group. 
　 以下情况必须建立新组: 
　　(1)可能要增加新用户,该用户不属于任何一个现有的小组. 
　　(2)有的用户可能时常需要独自为一个小组. 
　　(3)有的用户可能有一个SGID程序,需要独自为一个小组. 
　　(4)有时可能要安装运行SGID的软件系统,该软件系统需要建立一个新组. 
　  要增加一个新组,必须编辑该文件,为新组加一个入口项. 由于用户登录时,系统从/etc/passwd文件中取GID,而不是从/etc/group中 取GID,所以group文件和口令文件应当具有一致性.对于一个用户的小组,UID和 GID应当是相同的.多用户小组的GID应当不同于任何用户的UID,一般为5位数,这 样在查看/etc/passwd文件时,就可根据5位数据的GID识别多用户小组,这将减少 增加新组,新用户时可能产生的混淆. 